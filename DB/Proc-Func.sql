

-- DATABASE > PROGRAMMABILITY > STORED PROCEDURES > SYSTEM STORED PROCEDURES
CREATE PROC sp_sampleproc_1
AS
BEGIN
	SELECT 'HELLO WORLD'
END;

EXECUTE sp_sampleproc_1

-- CHANGE PROCEDURE
ALTER PROC sp_sampleproc_1
AS
BEGIN
	SELECT 'QUERY COMPLETED'
END;

sp_sampleproc_1

--CREATE TABLE
CREATE TABLE ORDER_TBL
(
ORDER_ID TINYINT NOT NULL,
CUSTOMER_ID TINYINT NOT NULL,
CUSTOMER_NAME VARCHAR(50),
ORDER_DATE DATE,
EST_DELIVERY_DATE DATE--estimated delivery date
);
INSERT ORDER_TBL VALUES (1, 1, 'Adam', GETDATE()-10, GETDATE()-5 ),
						(2, 2, 'Smith',GETDATE()-8, GETDATE()-4 ),
						(3, 3, 'John',GETDATE()-5, GETDATE()-2 ),
						(4, 4, 'Jack',GETDATE()-3, GETDATE()+1 ),
						(5, 5, 'Owen',GETDATE()-2, GETDATE()+3 ),
						(6, 6, 'Mike',GETDATE(), GETDATE()+5 ),
						(7, 6, 'Rafael',GETDATE(), GETDATE()+5 ),
						(8, 7, 'Johnson',GETDATE(), GETDATE()+5 )

SELECT *
FROM ORDER_TBL


-- CREATE ANOTHER TABLE
CREATE TABLE ORDER_DELIVERY
(
ORDER_ID TINYINT NOT NULL,
DELIVERY_DATE DATE -- tamamlanan delivery date
);
SET NOCOUNT ON
INSERT ORDER_DELIVERY VALUES (1, GETDATE()-6 ),
						(2, GETDATE()-2 ),
						(3, GETDATE()-2 ),
						(4, GETDATE() ),
						(5, GETDATE()+2 ),
						(6, GETDATE()+3 ),
						(7, GETDATE()+5 ),
						(8, GETDATE()+5 )

SELECT *
FROM ORDER_DELIVERY

--

CREATE PROC sp_sumorder
AS
BEGIN
	SELECT COUNT (ORDER_ID) FROM Order_tbl
END;

sp_sumorder

--

CREATE PROC sp_wanted_dayorder (@DAY DATE)
AS
BEGIN
	SELECT COUNT (ORDER_ID)
	FROM ORDER_TBL
	WHERE ORDER_DATE = @DAY
END;

SELECT * 
FROM ORDER_TBL

EXEC sp_wanted_dayorder '2021-08-12'

--

-- SORGU PARAMETRELERÝ TANIMLIYORUZ:
	-- PARAMETRELERE DEÐER ATAMAK ÝÇÝN SET VEYEA SELECT DÝYORUZ
DECLARE @P1 INT, @P2 INT, @SUM INT
SET @P1 = 6
SELECT @P2  =4
SELECT @SUM = @P1 + @P2
SELECT @SUM
-- DEÐER ATAMAK ÝÇÝN SET VEYA SELECT,
-- PARAMETREYÝ ÇAÐIRMAK ÝÇÝN SELECT
-- Another example
DECLARE @P1 INT , @P2 INT , @SUM INT
SET @P1 = 5
SELECT @P2 = 4
SELECT @SUM = @P1+@P2
SELECT @SUM
-- Another example
DECLARE @P1 INT , @P2 INT , @SUM INT
SELECT @P1 = 3 , @P2 = 7, @SUM = @P1+@P2
SELECT  @SUM
PRINT @SUM


--

DECLARE @CUST_ID INT
SET @CUST_ID = 5  -- CUST parametresine 5 deðerini atýyorum. aþaðýda sorguda bunu kullanacaðým.
SELECT *
FROM ORDER_TBL
WHERE CUSTOMER_ID = @CUST_ID


DECLARE @CUST_ID INT  -- CUST_ID ÝSMÝNDE INT TÝPÝNDE BÝR OBJECT OLUÞTURDUM
IF @CUST_ID < 3
BEGIN   --- BEGIN KOYARSAN HEMEN ALTINDA END YAZ KÝ UNUTMA.
	SELECT *
	FROM ORDER_TBL
	WHERE CUSTOMER_ID = @CUST_ID
END;

--

DECLARE @CUST_ID INT
SET @CUST_ID = 3
IF @CUST_ID < 3
BEGIN
	SELECT *
	FROM ORDER_TBL
	WHERE	CUSTOMER_ID= @CUST_ID
END
ELSE IF @CUST_ID > 3
BEGIN
	SELECT *
	FROM ORDER_TBL
	WHERE	CUSTOMER_ID= @CUST_ID	
END
ELSE
	PRINT 'CUSTOMER ID EQUAL TO 3'

	-------------------------WHILE------------------------
-- BELÝRTÝLEN ÞART SAÐLANDIÐI SÜRECE ÝÞLEME DEVAM EDER.
-- DÝKKAT EDÝLMESÝ GEREKEN NOKTA: (ÝÇÝNDE PARAMETRE VAR ÝSE) BELÝRTTÝÐÝNÝZ PARAMETRENÝN BÝTECEÐÝ YERÝ SÖYLEMENÝZ GEREKÝYOR
	-- YOKSA SONSUZ DÖNGÜYE GÝRECEKTÝR.
DECLARE @NUM_OF_ITER INT = 50, @COUNTER INT = 0
WHILE @NUM_OF_ITER > @COUNTER --COUNTER 50'YE GELENE KADAR BEGIN-END KODUNU ÇALIÞTIRACAK.
BEGIN  -- WHILE ÝLE DE BEGIN KULLANIYORUM.
	SELECT @COUNTER
	SET @COUNTER += 1 --- DÖNGÜYÜ BU ÞEKÝLDE KONTROL EDÝYORUM. ÝTERASYONU SAÐLAYAN SATIR BU SATIR.
END


---FUNCTIONS
CREATE FUNCTION fn_uppertext
(
	@inputtext varchar(max)
)
RETURNS VARCHAR(MAX)
AS
BEGIN
	RETURN UPPER(@inputtext)
END
SELECT dbo.fn_uppertext('whatsapp')
SELECT dbo.fn_uppertext(customer_name) FROM ORDER_TBL


-------TABLE VALUED FUNCTIONS-----------
CREATE FUNCTION fn_order_detail (@DATE DATE)
RETURNS TABLE
AS
	RETURN SELECT * FROM ORDER_TBL WHERE ORDER_DATE = @DATE  --BURADA BÝR TABLO ÜRETÝLÝYOR.
-- !! TABLE VALUED FUNCTIONDA BEGIN-END KULLANILMIYOR !!
SELECT * FROM dbo.fn_order_detail('2021-08-17')
-- TABLE-VALUED FUNCTION BÝR TABLO OLUÞTURDUÐU ÝÇÝN ,
	--ÇAÐIRIRKEN DE BÝR TABLO ÇAÐIRIR GÝBÝ "FROM" KULLANIYORUZ!!